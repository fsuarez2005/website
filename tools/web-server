#!/usr/bin/env python3

from http.server import HTTPServer, BaseHTTPRequestHandler
import os
import sys



DEFAULTFILES=[
    'index.html',
    'index.htm'
]


ENCODING = "UTF-8"

def getFileExtension(filename):
    # get last part, splitting on .
    # TODO: should use library function
    return (filename.split('.')[-1])

def requestHandlerToString(rh):
    output =  f"{rh.client_address}\n"
    output += f"{rh.command}\n"
    output += f"{rh.path}\n"
    output += f"{rh.headers}\n"
    
    return output



class FileTypeHandler:
    def __init__(self,fileext=None,callback=None):
        self.fileext = fileext
        self.callback = callback

class ReqHandler(BaseHTTPRequestHandler):
    # extHandlers = {}
    
    
    
    def __init__(self,request, client_address, server):
        super().__init__(request, client_address, server)
        
        self.extHandlers = {}
        
        # register handlers
        self.extHandlers['html'] = FileTypeHandler(fileext='html',callback=lambda request, client_address, server: print("hi"))
        

    def do_GET(self):
        # check for existence
        print(self.path)
        
        
        self.send_response(200)
        self.end_headers()
        
        self.wfile.write(bytes(requestHandlerToString(self),encoding=ENCODING))
        
        
        
    def do_HEAD(self):
        print("##### HEAD #####")
        self.send_response()
        self.end_headers()





class WebServer:
    def __init__(self,port=8080,hostname=''):
        self.port = port
        self.hostname = hostname
    
    
    
    def run(self,server_class=HTTPServer, handler_class=ReqHandler):
        print(f"Listening on {server_address}...")
        
        server_address = (self.hostname, self.port)
        httpd = server_class(server_address, handler_class)
        httpd.serve_forever()

def main():
    w = WebServer()
    w.run()


if __name__ == '__main__':
    main()






